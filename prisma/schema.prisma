generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model tweetParent {
  id            Int            @id @default(autoincrement())
  tweet         String?        @db.VarChar(140)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?      @updatedAt @map("updated_at")
  authorId      Int
  user          user           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tweet_child   tweetChild[]
  tweet_comment tweetComment[]
  tweet_photos  tweetPhoto[]

  like    like[]
  retweet retweet[]
  @@index([authorId], map: "tweet_parents_authorId_fkey")
  @@map("tweet_parents")
}

model tweetChild {
  id            Int         @id @default(autoincrement())
  tweet         String      @db.VarChar(140)
  idTweetParent Int         @map("id_tweet_parent")
  tweet_parent  tweetParent @relation(fields: [idTweetParent], references: [id])

  like    like[]
  retweet retweet[]
  @@index([idTweetParent], map: "tweet_childs_id_tweet_parent_fkey")
  @@map("tweet_childs")
}

model tweetPhoto {
  id            Int         @id @default(autoincrement())
  idTweetParent Int         @map("id_tweet_parent")
  images        String?     @db.VarChar(255)
  description   String?     @db.VarChar(255)
  tweet_parent  tweetParent @relation(fields: [idTweetParent], references: [id])

  @@index([idTweetParent], map: "tweet_photos_id_tweet_parent_fkey")
  @@map("tweet_photos")
}

model tweetComment {
  id            Int         @id @default(autoincrement())
  idTweetParent Int         @map("id_tweet_parent")
  content       String      @db.VarChar(500)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  authorId      Int
  user          user        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tweet_parent  tweetParent @relation(fields: [idTweetParent], references: [id])

  @@index([authorId], map: "tweet_comments_authorId_fkey")
  @@index([idTweetParent], map: "tweet_comments_id_tweet_parent_fkey")
  @@map("tweet_comments")
}

model like {
  id            BigInt @id @default(autoincrement())
  userProfileId Int    @map("user_id")
  tweetParentId Int    @map("tweet_parent_id")
  tweetChildId  Int?   @map("tweet_child_id")

  user        user        @relation(fields: [userProfileId], references: [id])
  tweetParent tweetParent @relation(fields: [tweetParentId], references: [id], onDelete: Cascade)
  tweetChild  tweetChild? @relation(fields: [tweetChildId], references: [id], onDelete: Cascade)
  @@map("likes")
}

model retweet {
  id BigInt @id @default(autoincrement())

  userId        Int
  tweetParentId Int
  tweetChildId  Int?

  user        user        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweetParent tweetParent @relation(fields: [tweetParentId], references: [id], onDelete: Cascade)
  tweetChild  tweetChild? @relation(fields: [tweetChildId], references: [id], onDelete: Cascade)
  @@map("retweets")
}

model gender {
  id            Int           @id @default(autoincrement())
  name          String
  user_settings userSetting[]

  @@map("genders")
}

model user {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(70)
  bio           String?        @db.VarChar(255)
  website       String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  avatar        String?        @db.VarChar(255)
  banner        String?        @db.VarChar(255)
  userSettingId Int            @map("user_setting_id")
  user_settings userSetting    @relation(fields: [userSettingId], references: [id], onDelete: Cascade)
  tweet_comment tweetComment[]
  tweet_parent  tweetParent[]

  like    like[]
  retweet retweet[]
  @@index([userSettingId], map: "users_user_setting_id_fkey")
  @@map("users")
}

model userSetting {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(150)
  password  String   @db.VarChar(255)
  genderId  Int?     @map("gender_id")
  dateBirth DateTime @default(now()) @map("date_birth") @db.Timestamp(6)
  genders   gender?  @relation(fields: [genderId], references: [id])
  user      user[]

  @@index([genderId], map: "user_settings_gender_id_fkey")
  @@map("user_settings")
}
